(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{347:function(t,s,a){"use strict";a.r(s);var e=a(25),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"单元格基本属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元格基本属性"}},[t._v("#")]),t._v(" 单元格基本属性")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("所有的单元格属性中的文本，以等号开始的就是表达式，其他是纯文本")])]),t._v(" "),s("h2",{attrs:{id:"值表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值表达式"}},[t._v("#")]),t._v(" 值表达式")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("值表达式")]),t._v(" 是计算报表每一个具体单元格的实际值用到的公式。它是报表计算的核心表达式。所有的取数表达式都是在值表达式中定义。")])]),t._v(" "),s("li",[s("p",[t._v("如果数据集字段是Blob等字节数组， 为了能通过网页传输，可以使用这个函数将字节数组转换为base64字符串形式。\n如果是图片，我们可以使用类似以下的公式，将图片显示到网页上。")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iif")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"<img style='width:60px;height:60px' src='data:image/png;base64,\"")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ByteArrToBase64String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'>"')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"显示值表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示值表达式"}},[t._v("#")]),t._v(" 显示值表达式")]),t._v(" "),s("p",[t._v("显示值表达式是为了显示让用户更友好的阅读数据所用到的公式。**缺省公式为"),s("code",[t._v("=@value")]),t._v("。@value表示的意思是当前值表达式的值，*不能在值表达式中使用@value。*在这里可以重新组织该单元格的显示数据。比如格式化数据、显示值单元格中所取代码的代表的实际名称等。")]),t._v(" "),s("ul",[s("li",[t._v("如果单元格的数据是数字类型，可以格式化数字，公式是："),s("code",[t._v("=formatNumber（@value）")]),t._v("缺省格式为：#######.##，可以在第二个参数指定格式。如：####.0000。")]),t._v(" "),s("li",[t._v("如果单元格是某个group函数取出的code代码，显示值表达式最好是另建一个数据集，比如叫：仓库，sql为："),s("code",[t._v("select 名称，id from 仓库表")]),t._v("，然后在显示值表达式中写:"),s("code",[t._v("=仓库.select1(仓库.名称,仓库.id==@value)")]),t._v("，你的其他sql中都不用取名称，这样做的好处，一方面能有效减少数据量，而且更容易维护；另一个好处，在需要group的数据集上不用关联取名称，一定程度的提高sql的执行效率。")]),t._v(" "),s("li",[t._v("如果该单元格的显示值需要从数据库查询，可以类似这样写："),s("code",[t._v("=query(数据库连接变量，”select xxx from table where yyy=’+@value+”’”)")]),t._v("。这种方式取数相对于先定义数据集，然后用ds.select1的方式取数，但这样会多次调用数据库查询，效率很低。不推荐这种方式，会让报表生成速度大幅下降。")]),t._v(" "),s("li",[t._v("如果单元格的值为零，显示为空白，公式为：=iif(@value==0,’’,@value)")]),t._v(" "),s("li",[t._v("如果单元格的值为万元为单位，公式为："),s("code",[t._v("= @value/10000")]),t._v(",和上面的为零显示空白结合，公式为："),s("code",[t._v("=iif(@value==0,’’,@value/10000)")])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("不要在值表达式以为的属性中使用 分组、归并等函数。")])]),t._v(" "),s("h2",{attrs:{id:"字体颜色和背景颜色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字体颜色和背景颜色"}},[t._v("#")]),t._v(" 字体颜色和背景颜色")]),t._v(" "),s("ul",[s("li",[t._v("针对字体颜色和背景颜色，我们也可以使用表达式动态计算，具体的颜色选取，参考设计器的下拉框。")]),t._v(" "),s("li",[s("strong",[t._v("类似excel中的条件格式设置。")]),t._v(" 我们可以选中设计器中要启用条件格式的单元格，选菜单上的条件格式，选取合适的方式，就可以实现类似excel中的条件格式设置。我们也可以设置通用模式，参看 "),s("RouterLink",{attrs:{to:"/zh/conf/base.html#前端隔行变色和条件颜色的配置"}},[t._v("这里")])],1)]),t._v(" "),s("h2",{attrs:{id:"报表的钻取、跳转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#报表的钻取、跳转"}},[t._v("#")]),t._v(" 报表的钻取、跳转")]),t._v(" "),s("ul",[s("li",[t._v("这个功能主要是通过单元格的链接属性实现的。在设计器上，点击该属性后的图标，进入表达式编辑页面，点："),s("code",[t._v("生成url连接串")]),t._v("，就可以自动生成缺省的url连接串，缺省会将所有的非内部属性组织到该url里面，其中有reportName=param.ReportName，表示的是当前的报表名，如果要跳转到其他报表，把这里的报表名称换成指定的报表名即可。如果要钻取，通常是报表名不变，参数改变，而且这通常发生在分组单元格上。比")])]),t._v(" "),s("h2",{attrs:{id:"排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如某公司的省市县三级机构，报表开始是显示的省公司的报表，其明细是各地市的数据，可以设置报表由省公司报表向地市公司报表的钻取。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("只要是只有一个行扩展（列扩展数不限）的报表，都已经内置了点报表表头排序。多个行扩展的报表，点击表头排序的功能是无意义的。")])])])]),t._v(" "),s("img",{attrs:{src:t.$withBase("//img/微信图片_20211227111416.png"),alt:"foo"}}),t._v(" "),s("h2",{attrs:{id:"扩展方向、左顶格、上顶格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展方向、左顶格、上顶格"}},[t._v("#")]),t._v(" 扩展方向、左顶格、上顶格")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("(这里可以作为提高对报表运行认知的时候查看。初学可以不用理会)")])]),t._v(" "),s("p",[t._v("新建的报表由行列整齐的格子组成，这些格子我们称为单元格，通过所有单元格的值和边框排列在一起，组成了报表。")]),t._v(" "),s("p",[t._v("每一个单元格都有扩展方向、左顶格、上顶格。缺省的扩展方向是空（等同于不扩展）。如果扩展方向为向下，那么报表生成时，将会按当前单元格的值（通常是List列表）向下展开。向右扩展，同理。")]),t._v(" "),s("p",[t._v("每个单元格都有左顶格和上顶格。单元格的左顶格属性寻找规则：同一行上，向左找到第一个有向下扩展属性的单元格，就是自己的左顶格，如果手动指定以指定为准。如果没有找打具有向下扩展属性的单元格，缺省就是隐含的rootCell: `0 .")]),t._v(" "),s("p",[t._v("每个可扩展单元格内部都具有属性：拥有的数据子集。\n每个单元格都拥有内部属性：当前属于哪个数据子集。所有单元格的计算，都依赖于此展开。这个属性是根据自己左顶格和上顶格拥有的数据子集的交集计算得到。rootCell拥有的是整个数据集.")])])}),[],!1,null,null,null);s.default=v.exports}}]);